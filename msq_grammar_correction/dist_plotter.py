import numpy as np
import matplotlib.pyplot as plt

def plot1():
    plt.rc('text', usetex=True)
    plt.rc('font', family='serif')
    tableau20 = [(31, 119, 180), (174, 199, 232), (255, 127, 14), (255, 187, 120),
                 (44, 160, 44), (152, 223, 138), (214, 39, 40), (255, 152, 150),
                 (148, 103, 189), (197, 176, 213), (140, 86, 75), (196, 156, 148),
                 (227, 119, 194), (247, 182, 210), (127, 127, 127), (199, 199, 199),
                 (188, 189, 34), (219, 219, 141), (23, 190, 207), (158, 218, 229)]

    # Scale the RGB values to the [0, 1] range, which is the format matplotlib accepts.
    for i in range(len(tableau20)):
        r, g, b = tableau20[i]
        tableau20[i] = (r / 255., g / 255., b / 255.)

    original_array = np.array([0.1, 0.65, 0.025, 0.2, 0.025])
    original_array2 = np.array([0.3, 0.1, 0.15, 0.2, 0.25])
    my_method = np.array([0, 1, 0, 0, 0])

    checking = original_array - my_method * (0.4)/3 #+ np.array([1,0,0,0,0]) * (0.1/5)
    checking = checking/np.sum(checking)
    checking_new = original_array - my_method * (0.45)/2 + np.array([1,0,0,0,0]) * (0.1/5)
    checking_new /= np.sum(checking_new)
    print('Checking: ', checking)
    print('Checking new: ', checking_new)
    print('Original: ', original_array)
    checking2 = original_array2 - np.array([1,0,0,0,0]) * (0.1)/2 #+ np.array([0,0,0,1,0]) * (0.05/5)
    checking2 /= np.sum(checking2)
    #argmaxer = np.array([0.5,0.1,0.1,0.15,0.15])

    argmaxer = np.array([0, 1, 0, 0, 0])
    argmaxer2 = np.array([1, 0, 0, 0, 0])

    temp_5 = original_array ** (1 / 1.4)
    temp_5 = temp_5 / np.sum(temp_5)

    temp_5_2 = original_array2 ** (1 / 1.25)
    temp_5_2 = temp_5_2 / np.sum(temp_5_2)
    print('Temp: ', temp_5)
    print('Diff:', checking_new - temp_5)
    print('Diff orig: ', checking_new - original_array)

    temp_25 = original_array ** (1 / 0.25)
    temp_25 = temp_25 / np.sum(temp_25)

    temp_25_2 = original_array2 ** (1 / 0.25)
    temp_25_2 = temp_25_2 / np.sum(temp_25_2)

    temp_75 = original_array ** (1 / 0.75)
    temp_75 = temp_75 / np.sum(temp_75)

    temp_75_2 = original_array2 ** (1 / 0.75)
    temp_75_2 = temp_75_2 / np.sum(temp_75_2)

    print(temp_25)
    print(temp_75)

    x = np.array([0.6, 2, 3.4, 4.8, 6.2])

    y = argmaxer
    z = original_array
    l = temp_25
    k = temp_5
    m = temp_75
    n = checking_new

    y2 = argmaxer2
    z2 = original_array2
    l2 = temp_25_2
    k2 = temp_5_2
    m2 = temp_75_2
    n2 = checking2

    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 3))
    ax1.spines["top"].set_visible(False)
    ax1.spines["bottom"].set_visible(False)
    ax1.spines["right"].set_visible(False)
    ax1.spines["left"].set_visible(False)

    # ax1.get_xaxis().tick_bottom()
    ax1.get_yaxis().tick_left()
    ax1.bar(x - 0.4, y * 100, width=0.2, color=tableau20[0], align='center')
    ax1.bar(x - 0.2, l * 100, width=0.2, color=tableau20[1], align='center')
    ax1.bar(x, k * 100, width=0.2, color=tableau20[2], align='center')
    ax1.bar(x + 0.2, m * 100, width=0.2, color=tableau20[3], align='center')
    ax1.bar(x + 0.4, z * 100, width=0.2, color=tableau20[4], align='center')
    ax1.bar(x + 0.6, n * 100, width=0.2, color=tableau20[5], align='center')
    ax1.set_xticklabels([])
    ax1.tick_params(axis="y", labelsize=8)

    ax2.spines["top"].set_visible(False)
    ax2.spines["bottom"].set_visible(False)
    ax2.spines["right"].set_visible(False)
    ax2.spines["left"].set_visible(False)

    # ax2.get_xaxis().tick_bottom()
    ax2.get_yaxis().tick_left()
    ax2.bar(x - 0.4, y2 * 100, width=0.2, color=tableau20[0], align='center')
    ax2.bar(x - 0.2, l2 * 100, width=0.2, color=tableau20[1], align='center')
    ax2.bar(x, k2 * 100, width=0.2, color=tableau20[2], align='center')
    ax2.bar(x + 0.2, m2 * 100, width=0.2, color=tableau20[3], align='center')
    ax2.bar(x + 0.4, z2 * 100, width=0.2, color=tableau20[4], align='center')
    ax2.bar(x + 0.6, n2 * 100, width=0.2, color=tableau20[5], align='center')
    ax2.set_xticklabels([])
    ax2.tick_params(axis="y", labelsize=8)

    plt.setp((ax1, ax2),
             yticks=range(0, 101, 10), yticklabels=[str(x) + "%" for x in range(0, 101, 10)])
    fig.legend(['$\\tau$ = 0', '$\\tau$ = 0.25', '$\\tau$ = 0.5', '$\\tau$ = 0.75', '$\\tau$ = 1', 'New'], loc=7, fontsize=8,
               frameon=False)
    # fig.suptitle('Effect of temperature parameter in TS')
    for y in [0,10,20,30,40,50,60,70,80,90,100]:
        ax1.plot(range(0, 7), [y] * len(range(0, 7)), "--", lw=0.5, color="black", alpha=0.3)
        ax2.plot(range(0, 7), [y] * len(range(0, 7)), "--", lw=0.5, color="black", alpha=0.3)
    ax1.xaxis.set_major_locator(plt.NullLocator())
    ax2.xaxis.set_major_locator(plt.NullLocator())

    plt.show()

def plot2():
    plt.rc('text', usetex=True)
    plt.rc('font', family='serif')

    tableau20 = [(31, 119, 180), (174, 199, 232), (255, 127, 14), (255, 187, 120),
                 (44, 160, 44), (152, 223, 138), (214, 39, 40), (255, 152, 150),
                 (148, 103, 189), (197, 176, 213), (140, 86, 75), (196, 156, 148),
                 (227, 119, 194), (247, 182, 210), (127, 127, 127), (199, 199, 199),
                 (188, 189, 34), (219, 219, 141), (23, 190, 207), (158, 218, 229)]

    # Scale the RGB values to the [0, 1] range, which is the format matplotlib accepts.
    for i in range(len(tableau20)):
        r, g, b = tableau20[i]
        tableau20[i] = (r / 255., g / 255., b / 255.)

    f_scores = [0.1865802382620883, 0.01067463706233988, 0.38542766631467784, 0.03143336127409891, 0.37872400224845426,
                0.056491372226787184, 0.3774538106235566, 0.06808943089430894, 0.41821808510638286, 0.10498430141287284,
                0.41800643086816724, 0.1637233259749816, 0.4352910602910603, 0.18565248738284068, 0.4461085509472606,
                0.19967765042979943, 0.46644372693726943, 0.22939750692520777, 0.4674563017479302, 0.2367617107942974,
                0.47495383194829177, 0.32638466220328666, 0.47461116193961583, 0.33900836320191163, 0.48999569707401036,
                0.295411690760528, 0.48746046091278805, 0.39096030042918456, 0.49292756108015434, 0.3362792091072499,
                0.5065913370998116, 0.3366510538641686, 0.509276611694153, 0.39283769063180823, 0.5030487804878049,
                0.3887659103486441, 0.5181623931623932, 0.42633703329969724, 0.5190003743916136, 0.39871255911718334,
                0.5175009409108017, 0.43129016312407314, 0.5222142601218202, 0.4019037546271814, 0.5189123071132857,
                0.4006578947368421, 0.5191059841384283, 0.435569498069498, 0.5199597450519959, 0.4162462159434914,
                0.5253811503811504, 0.4391891891891892, 0.5248287671232876, 0.4143920595533499, 0.5222011057360056,
                0.4250963391136801, 0.5266184686164969, 0.448345259391771, 0.5240522459381969, 0.45266338406445844,
                0.5178347934918649, 0.4406108597285068, 0.5234473023839398, 0.43702107279693486, 0.5268184596577017,
                0.4311163895486935, 0.5184680593399941, 0.4489958922866271, 0.5184977578475336, 0.4473868408772749,
                0.5099826388888888, 0.4583521955636034, 0.5189382642409782, 0.4627403846153847, 0.5134115674769488,
                0.456688596491228, 0.5102996254681649, 0.460497114957834, 0.5087085811384877, 0.46497844827586204,
                0.5167780360255665, 0.4688176699870074, 0.5153694303440496, 0.4701784936874184]

    f_scores_orig = f_scores[0::2]
    f_scores_artificial = f_scores[1::2]
    rates = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
             1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
             1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
             0.9, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81, 0.7290000000000001, 0.6561000000000001,
             0.5904900000000002, 0.5314410000000002, 0.47829690000000014, 0.43046721000000016, 0.38742048900000015,
             0.34867844010000015, 0.31381059609000017, 0.28242953648100017, 0.25418658283290013,
             0.22876792454961012]  # 0.2058911320946491]

    plt.figure(figsize=(6.5, 4))
    ax = plt.subplot(111)
    ax.spines["top"].set_visible(False)
    ax.spines["bottom"].set_visible(False)
    ax.spines["right"].set_visible(False)
    ax.spines["left"].set_visible(False)
    plt.yticks(range(0, 101, 10), [str(x) + "%" for x in range(0, 101, 10)], fontsize=8)
    plt.xticks(range(0, len(f_scores_orig), 10), [x for x in range(0, len(f_scores_orig), 10)], fontsize=8)
    for y in range(0, 101, 10):
        plt.plot(range(1, len(f_scores_orig)), [y] * len(range(1, len(f_scores_orig))), "--", lw=0.5, color="black",
                 alpha=0.3)

    print(len(f_scores_artificial), len(f_scores_orig), len(rates))
    t = np.arange(1, len(f_scores_orig) + 1)

    for i in range(len(f_scores_artificial)):
        f_scores_artificial[i] *= 100
        f_scores_orig[i] *= 100
    for j in range(len(rates)):
        rates[j] *= 100

    print(rates[0::2])
    plt.plot(t, f_scores_orig, lw=1, color=tableau20[0])
    plt.plot(t, f_scores_artificial, lw=1, color=tableau20[2])
    plt.plot(t, rates[0::2], lw=1, color=tableau20[4])

    val1 = f_scores_orig[-1]
    val2 = f_scores_artificial[-1]
    val3 = rates[0::2][-1]
    plt.xlim(0, 47)

    plt.text(43, val1 + 0.25, r'Original data $F_{0.5}$', fontsize=8, color=tableau20[0])
    plt.text(43, val2 - 0.25, r'Artificial data $F_{0.5}$', fontsize=8, color=tableau20[2])
    plt.text(43, val3, r'Learning rate', fontsize=8, color=tableau20[4])

    plt.show()


def plot3():
    plt.rc('text', usetex=True)
    plt.rc('font', family='serif')

    tableau20 = [(31, 119, 180), (174, 199, 232), (255, 127, 14), (255, 187, 120),
                 (44, 160, 44), (152, 223, 138), (214, 39, 40), (255, 152, 150),
                 (148, 103, 189), (197, 176, 213), (140, 86, 75), (196, 156, 148),
                 (227, 119, 194), (247, 182, 210), (127, 127, 127), (199, 199, 199),
                 (188, 189, 34), (219, 219, 141), (23, 190, 207), (158, 218, 229)]

    # Scale the RGB values to the [0, 1] range, which is the format matplotlib accepts.
    for i in range(len(tableau20)):
        r, g, b = tableau20[i]
        tableau20[i] = (r / 255., g / 255., b / 255.)

    t = [5, 15, 25, 35, 45]
    fce_dev = [0.526943301, 0.521274898, 0.529493531, 0.528599053, 0.530660216]
    fce_test = [0.493484159, 0.493245149, 0.486609171, 0.486670171, 0.492952274]
    conll1 = [0.204277214, 0.209235268, 0.20889363, 0.211993297, 0.206419089]
    conll2 = [0.280766658, 0.28300674, 0.284239511, 0.283896047, 0.281670745]

    for i in range(len(fce_dev)):
        fce_dev[i] *= 100
        fce_test[i] *= 100
        conll1[i] *= 100
        conll2[i] *= 100

    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 3.5))
    ax1.spines["top"].set_visible(False)
    ax1.spines["bottom"].set_visible(False)
    ax1.spines["right"].set_visible(False)
    ax1.spines["left"].set_visible(False)

    l1 = ax1.plot(t, fce_dev, color = tableau20[0])[0]
    l2 = ax1.plot(t, fce_test, color = tableau20[2])[0]

    l3 = ax2.plot(t, conll1, color = tableau20[4])[0]
    l4 = ax2.plot(t,conll2, color = tableau20[6])[0]

    ax2.spines["top"].set_visible(False)
    ax2.spines["bottom"].set_visible(False)
    ax2.spines["right"].set_visible(False)
    ax2.spines["left"].set_visible(False)

    ticker2 = [20,22,24,26,28,30]
    ticker1 = [48,49,50,51,52,53,54]

    #plt.yticks(ticker, [str(x) + "%" for x in ticker], fontsize=8)
    fig.legend((l1,l2,l3,l4), labels= ('FCE (dev)', 'FCE', 'CoNLL1', 'CoNLL2'), loc=7, frameon=False, bbox_to_anchor = (1.012,0.5), fontsize = 8)
    plt.setp((ax1, ax2),
             xticks=[5,15,25,35,45], xticklabels=['$\\tau$ = 0', '$\\tau$ = 0.25', '$\\tau$ = 0.5', '$\\tau$ = 0.75', '$\\tau$ = 1'])
    for y in ticker1:
        ax1.plot(range(1, 46), [y] * len(range(1, 46)), "--", lw=0.5, color="black",
                 alpha=0.3)
    for y in ticker2:
        ax2.plot(range(1, 46), [y] * len(range(1, 46)), "--", lw=0.5, color="black",
                 alpha=0.3)

    #plt.plot(t, fce_dev, lw=1, color=tableau20[0])
    #plt.plot(t, fce_test, lw=1, color=tableau20[2])
    #plt.plot(t, conll1, lw=1, color=tableau20[4])
    #plt.plot(t, conll2, lw=1, color=tableau20[6])

    #val1 = fce_dev[-1]
    #val2 = fce_test[-1]
    #val3 = conll1[-1]
    #val4 = conll2[-1]
    #plt.xlim(0, 50)

    #plt.text(47, val1, 'FCE (dev)', fontsize=8, color=tableau20[0])
    #plt.text(47, val2, 'FCE', fontsize=8, color=tableau20[2])
    #plt.text(47, val3, 'CoNLL1', fontsize=8, color=tableau20[4])
    #plt.text(47, val4, 'CoNLL2', fontsize=8, color=tableau20[6])

    plt.show()

def plot4():
    plt.rc('text', usetex=True)
    plt.rc('font', family='serif')

    tableau20 = [(31, 119, 180), (174, 199, 232), (255, 127, 14), (255, 187, 120),
                 (44, 160, 44), (152, 223, 138), (214, 39, 40), (255, 152, 150),
                 (148, 103, 189), (197, 176, 213), (140, 86, 75), (196, 156, 148),
                 (227, 119, 194), (247, 182, 210), (127, 127, 127), (199, 199, 199),
                 (188, 189, 34), (219, 219, 141), (23, 190, 207), (158, 218, 229)]

    # Scale the RGB values to the [0, 1] range, which is the format matplotlib accepts.
    for i in range(len(tableau20)):
        r, g, b = tableau20[i]
        tableau20[i] = (r / 255., g / 255., b / 255.)

    conll2 = [0.16826287, 0.17665759, 0.18582044, 0.19450701, 0.2022512, 0.20985968, 0.21675408,0.223317,0.22813343, 0.23448606, 0.24067514,0.24554144, 0.25148932,
                0.25791519,0.26269647, 0.26681619,0.27051291,0.27495929,0.2817312 ,0.28779912,0.29186347,0.29412687,0.29352394,0.29645572,0.29855104,0.30180197,
                0.30378828,0.30463296,0.30428984,0.30390571,0.30565584,0.30278684,0.30354617,0.30369357,0.30338224,0.30566527,0.30360765,0.30509989,0.30312026,0.30559923,0.304934,
                0.30378087,0.30388401,0.29817397,0.29643169,0.29375765,0.29103414,0.29203693,0.29070283,0.2892562,0.2869427 ,0.28745561,0.28414119,0.2826589,
                0.27916965,0.27838599,0.27530798,0.27273715,0.26910775,0.26696579,0.26197863,0.26003059,0.25794841,0.25749235,0.25641026,0.25143954,0.24872699,
                0.24338343,0.23783711,0.23176975,0.23012848,0.22684718,0.22537072,0.22106049,0.21927821,0.21563132,0.20981789,0.20352124,0.19418278,0.19085253,0.18264449,0.1761116 ,0.17280903,0.16178321,
                0.15251142,0.15095388,0.14194397,0.13838519,0.13621327,0.13025459,0.11979062,0.11197863,0.10340506,0.09273076,0.08045227,0.06737354,0.05836139,0.04327033,
                0.02902252,0.0106057,0]

    conll1 = [0.12106694, 0.12655047,0.13264578,0.13792423,0.14279643,0.14769502,0.1519938 ,0.15615921,0.15976802,0.16321244,0.16770186,0.17092674,0.17432706,
                 0.17862858,0.18244111,0.18574297,0.18883755,0.19052909,0.19329756,0.19778205,0.20134952,0.20466693,0.20681097,0.2076087,0.20979688,0.21212732,0.21310433,
                 0.21490993,0.21561443,0.2175935 ,0.22025756,0.22156297,0.22114739,0.22468948,0.22500608,0.22689769,0.22603558,0.2275242,0.23007454,0.23137109,
                 0.23263889,0.2336262 ,0.23422009,0.23360516,0.23338608,0.23081101,0.23329601,0.23497689,0.23273124,0.23153815,0.23072061,0.23176292,0.22869255,
                 0.2279479,0.22748483,0.22900763,0.22453248,0.22448724,0.22201018,0.22055008,0.21478122,0.21461876,0.21254209,0.21024684,0.21140247,0.20959443,
                 0.20923745,0.20595691,0.20414776,0.19850498,0.19741321,0.19700139,0.19718059,0.19497085,0.19216418,0.18692485,0.18010963,0.1755618,0.16721718,
                 0.16561181,0.16111592,0.15459364,0.15232975,0.14348026,0.13589503,0.13120229,0.12524319,0.11904762,0.11571719,0.11139896,0.09973404,0.09153005,
                 0.08240223,0.07749713,0.06928066,0.05873494,0.04772167,0.03925879,0.01935484,0.00988142,0]

    fce_test = [0.18305819,0.19887541,0.21857865,0.23738392,0.25440526,0.27183471,0.28743145,0.30312223,0.31723792,0.32968842,0.3429575,0.35744554,0.36926094,
                0.38163199,0.3921728,0.40272495,0.40997791,0.41829658,0.42694497,0.43507202,0.4434999,0.45171658,0.45803036,0.46265488,0.46904439,0.47314666,
                0.47863065,0.48226715,0.48631467,0.49027314,0.49090613,0.49582792,0.49612033,0.49618661,0.49763469,0.4980381,0.50016963,0.50255241,0.50361166,
                0.50442341,0.50588173,0.50662803,0.50563651,0.50595742,0.50688324,0.50659244,0.50445015,0.50459553,0.50393116,0.50255859,0.50003216,0.49603565,0.49650582,
                0.49360146,0.49138109,0.4922424,0.49015456,0.489267,0.48694451,0.48689553,0.48597082,0.48347892,0.48108774,0.47829488,0.47681125,0.47227349,0.46759372,
                0.46231322,0.46059794,0.45859117,0.45629655,0.45194061,0.44695438,0.44273383,0.43777558,0.43323279,0.42970553,0.42457683,0.41962007,0.41470447,0.40667515,
                0.40009916,0.38916406,0.38213298,0.37412842,0.36735986,0.36062065,0.34465753,0.33633034,0.32695554,0.30987213,0.29290672,0.26782461,0.24747538,
                0.22567447,0.2052459,0.17931778,0.14243821,0.10830325,0.05746257,0]

    fce_dev = [0.16219693,0.18950437,0.21802497,0.24343096,0.26654412,0.28747358,0.30630601,0.32335803,0.33709627,0.35249018,0.36450171,0.37868999,0.38987779,
                0.40298295,0.41495095,0.42436193,0.43668567,0.44568941,0.45272196,0.46041206,0.46818031,0.47600552,0.48272449,0.48669272,0.49213169,0.49864621,
                0.50405743,0.50835129,0.51063358,0.51635407,0.52085788,0.52314251,0.52631579,0.52915489,0.5311187,0.53364738,0.53492698,0.5360658,0.53802009,
                0.53755144,0.53705371,0.53774164,0.54128942,0.54443204,0.54243752,0.54250744,0.54194631,0.53950068,0.53756925,0.53741617,0.53577818,0.53668973,
                0.53604522,0.53282543,0.53279468,0.53288201,0.53039216,0.52762321,0.52539141,0.52350427,0.52014803,0.51627034,0.51334594,0.51099957,0.50979759,
                0.50750653,0.5037478,0.5015639,0.49966125,0.4977221,0.4950552,0.49105067,0.48656927,0.48053964,0.4760754,0.47401171,0.46790123,0.46101949,0.45540677,
                0.45344388,0.44739556,0.44331773,0.43618421,0.43197551,0.4254315,0.41666667,0.40557404,0.39724874,0.3854405,0.3747821,0.36242604,0.34659433,0.32927205,
                0.31309298,0.29220779,0.26725871,0.24118257,0.19502903,0.15636775,0.0872093,0]

    conll2_2 = [0.1682628731717091, 0.17496303597831445, 0.18291551424001695, 0.19063686208350902, 0.1979431880585093, 0.20455730691046092, 0.21178490613238118, 0.21781863912188806, 0.22485090766105248, 0.23069172532501153, 0.23780405959642661, 0.24373828181337437, 0.2502448327405804, 0.2565778571560089, 0.26229508196721313, 0.26690803460542656, 0.27034315377873663, 0.27214719217022093, 0.2762959748845044, 0.27758869496555666, 0.28110585709727015, 0.28403691100278977, 0.283160191487283, 0.2851186989628915, 0.28852792616010753, 0.28957528957528955, 0.290511834918066, 0.28916279268136647, 0.29085128296986257, 0.2895390819149436, 0.2912478548663888, 0.29192038069897147, 0.291994224290069, 0.29140507805989224, 0.29374238821550774, 0.2950730914997292, 0.2962755704781446, 0.2937383117301864, 0.2906551380113069, 0.2898051903352379, 0.2873030583873957, 0.28469620160164577, 0.2831622957050552, 0.2814478930498006, 0.2797174733124649, 0.2759592276456452, 0.2721903620645382, 0.26992514310876264, 0.270038770174015, 0.2667901806391848, 0.2666603289286054, 0.2679528403001072, 0.2657823875536052, 0.26221448325309843, 0.2613240418118467, 0.26318627979721715, 0.26023937630394206, 0.26086470785387106, 0.25999312793494445, 0.26115470195573254, 0.25651808242220353, 0.2555460227969114, 0.24865000627904058, 0.24592269166559652, 0.24359816152330926, 0.2419032387045182, 0.24133242692046225, 0.23683844978469235, 0.23316796598157333, 0.22835669894493427, 0.2249007790680582, 0.2212855637513172, 0.216924727885942, 0.21498675806200346, 0.20863081072505157, 0.20596249398942137, 0.20278004905968927, 0.19753292215369225, 0.19436428450178236, 0.18800901057009184, 0.17986245812026097, 0.17488789237668162, 0.1695692025664528, 0.16266964119724855, 0.1589840075258702, 0.155326853440061, 0.15363933166890725, 0.14754416618132402, 0.13793103448275862, 0.12663316582914572, 0.1204697307147196, 0.11010495986828565, 0.09601181683899558, 0.08378088077336197, 0.07732520148115879, 0.07289595758780648, 0.05943036555281452, 0.05100884153253231, 0.040183696900114814, 0.018730976352142353, 0.0]
    conll1_2 = [0.12106694289783765, 0.12548099642206173, 0.13089496248660237, 0.1354656453814652, 0.13931560011319075, 0.14409392789373815, 0.1480930640103302, 0.15223802914642606, 0.15701576816535262, 0.16013778967146844, 0.16394811979831117, 0.16724949343094322, 0.1725559688399186, 0.17795269659536003, 0.18158783783783783, 0.18606911447084232, 0.18929594382333917, 0.19120553359683795, 0.19356367849994732, 0.19439752252252251, 0.19736050986050988, 0.20024194575321533, 0.19796610169491524, 0.20042421627840087, 0.20332927941623594, 0.20619589612055145, 0.20673813169984687, 0.20818345323741008, 0.20995076690020828, 0.20974155069582506, 0.21106941838649157, 0.21187827225130895, 0.2118111136519552, 0.21409004287756075, 0.21264654527313542, 0.2143876491956409, 0.2174643721430492, 0.2171328671328671, 0.21695111368238357, 0.21546546546546544, 0.21333853354134164, 0.21202837794259916, 0.2130063608972213, 0.21149861878453038, 0.20929612513330964, 0.2094843462246777, 0.2095265368461245, 0.2074300354749704, 0.20588830433023067, 0.20390070921985815, 0.2029639175257732, 0.2042844522968198, 0.20464852607709752, 0.20395044413277233, 0.20450145208131654, 0.2052331349206349, 0.20379746835443038, 0.20532024793388431, 0.20534290271132374, 0.20662847790507366, 0.2037661607644744, 0.2021001150747986, 0.19908229721728832, 0.19452887537993924, 0.1958489388264669, 0.19456797966963152, 0.19518542615484707, 0.19108811748998666, 0.18638850889192884, 0.18207282913165268, 0.17959256611865623, 0.17752023546725532, 0.17400300978179084, 0.17363775901765158, 0.16974097331240187, 0.16593799682034974, 0.16096169519152403, 0.1565108514190317, 0.1515798462852263, 0.14789658194566171, 0.14784946236559143, 0.14194139194139194, 0.13653483992467044, 0.1342281879194631, 0.1277994157740993, 0.12747524752475248, 0.12625, 0.1191683569979716, 0.10858324715615306, 0.09819532908704884, 0.09110396570203644, 0.08214676889375686, 0.06936579841449604, 0.05945475638051044, 0.05762411347517731, 0.05271084337349398, 0.0445879458794588, 0.035892634207240946, 0.025412960609911054, 0.013054830287206267, 0.0]
    fce_test_2 = [0.18305818956757036, 0.19624503822059464, 0.2111393375832814, 0.22625014131213023, 0.2405627917388673, 0.2550020509548334, 0.2686005909213, 0.28326502212413435, 0.2959853367232307, 0.3112608277189606, 0.32352981998362224, 0.336261920853045, 0.3465610603733937, 0.3580257584925231, 0.36992133271633504, 0.38212345679012344, 0.3912796925209502, 0.4001112966054535, 0.41045566937477923, 0.41892661663818515, 0.4263596250750633, 0.43291355507178486, 0.44104410441044106, 0.44734034445968607, 0.4540213317959066, 0.4598257502420135, 0.4675329211638548, 0.47352545699022425, 0.4790725913558229, 0.48183347021784195, 0.4861813620361753, 0.4903433028824094, 0.49320821013840677, 0.4964837011809457, 0.4987468671679199, 0.5016659627387489, 0.5026276457258569, 0.5044304737389238, 0.5057810828706769, 0.5075334966894323, 0.5084202085004009, 0.5074007318804958, 0.5098840790726326, 0.5095050522349718, 0.509002971854787, 0.5097043893699611, 0.5120243531202436, 0.5083906124218218, 0.5056356652603741, 0.5058665127909213, 0.5040729879439557, 0.5021544580709314, 0.5005722749612873, 0.4968837750838983, 0.4933592935122731, 0.48992576882290556, 0.4889861519695774, 0.48559192857661315, 0.4810731348768835, 0.47642179209326657, 0.47171248001218297, 0.47150898295936455, 0.46753856997415616, 0.4637369636175464, 0.4591713108795735, 0.4546569629569057, 0.4493823066080756, 0.4447711045779084, 0.44103873988931463, 0.4381509856245158, 0.43423234703674607, 0.42855880533710344, 0.4224656550237946, 0.4193607139604772, 0.41447429151666204, 0.4105694845745177, 0.40548177451257417, 0.398857686815802, 0.3928468138436325, 0.3861570045947796, 0.3808061800534812, 0.3736065079843326, 0.3670705630791161, 0.35946699721103187, 0.3513286419493751, 0.34067814739544333, 0.326477309826967, 0.31537014495961047, 0.30430869614129824, 0.2877656519241815, 0.27474462839027824, 0.25908600215905003, 0.24752475247524744, 0.23258722020757788, 0.2142765766918255, 0.19197896120973046, 0.16993906567366282, 0.13411037775593315, 0.10565928499059198, 0.06030453791647822, 0.0]
    fce_dev_2 =[0.16219692944433572, 0.18421390305713278, 0.20925048500223842, 0.23176420695504665, 0.25151349032319575, 0.2709166000532907, 0.28918407194840545, 0.3050886108939276, 0.31991495140080045, 0.33592410783855386, 0.35012674271229405, 0.3644075526771869, 0.3768751838415531, 0.3904939177852349, 0.40207050923335197, 0.4121420047732697, 0.42084073040831854, 0.43134749865519095, 0.44068340704808107, 0.4518796992481204, 0.45895345155161493, 0.4678168546781686, 0.4746477648286659, 0.47770700636942676, 0.4854115187226763, 0.48802217382696506, 0.4934345506770618, 0.49766305502443164, 0.5027412280701755, 0.5090484862280902, 0.5128205128205128, 0.5191887296575177, 0.5216929232308077, 0.5239655615523001, 0.5265579805416777, 0.5275383786695395, 0.5325546032623721, 0.5366269165247018, 0.5381491151726139, 0.5389908256880734, 0.5405099577549788, 0.5425253768071363, 0.5422446406052962, 0.5437580437580437, 0.5442622950819672, 0.5430602006688963, 0.5414120841819416, 0.5384349030470914, 0.5359028511087646, 0.5344364937388194, 0.5332422586520946, 0.5317371937639198, 0.5322155237377544, 0.5315709395207302, 0.5291618385477017, 0.526908023483366, 0.5266798418972332, 0.5240480961923847, 0.52079107505071, 0.5197664891437935, 0.5189362582781457, 0.5182926829268293, 0.5139243197278912, 0.5110467610467611, 0.5096195417207091, 0.508548882069268, 0.5070859167404783, 0.5019066846119336, 0.49670004551661356, 0.49158598432457357, 0.4878900791802515, 0.4829948039678791, 0.4780114722753346, 0.4717664092664091, 0.4681396484375001, 0.46358024691358024, 0.4596412556053811, 0.45705675539929685, 0.450076608784474, 0.442775763852926, 0.4350393700787401, 0.42991520932697397, 0.42359249329758714, 0.4191576086956522, 0.4090657822001106, 0.4012345679012346, 0.39080296127562636, 0.3827267475447719, 0.37404467960023513, 0.3617435590173757, 0.34832317073170727, 0.3384448574969021, 0.32451165721487085, 0.30767994858611825, 0.28510217534607774, 0.2655091031692515, 0.24151662049861497, 0.19746376811594205, 0.14554794520547945, 0.0872093023255814, 0.0]

    conll2_3 = []
    conll1_3 = []
    fce_test_3 = []
    fce_dev_3 = []

    conll1_avg = []
    conll2_avg = []
    fce_dev_avg = []
    fce_test_avg = []

    for i in range(len(conll1)):
        conll1_avg.append(conll1[i] + conll1_2[i])# + conll1_3[i])
        conll2_avg.append(conll2[i] + conll2_2[i])# + conll2_3[i])
        fce_dev_avg.append(fce_dev[i] + fce_dev_2[i])# + fce_dev_3[i])
        fce_test_avg.append(fce_test[i] + fce_test_2[i])# + fce_test_3[i])

        conll1_avg[i] *= 100/3
        conll2_avg[i] *= 100/3
        fce_dev_avg[i] *= 100/3
        fce_test_avg[i] *= 100/3

    plt.figure(figsize=(6.5, 4))
    ax = plt.subplot(111)
    ax.spines["top"].set_visible(False)
    ax.spines["bottom"].set_visible(False)
    ax.spines["right"].set_visible(False)
    ax.spines["left"].set_visible(False)
    plt.yticks(range(0, 61, 10), [str(x) + "%" for x in range(0, 61, 10)], fontsize=8)
    plt.xticks(range(0, len(fce_dev), 10), [x for x in range(0, len(fce_dev), 10)], fontsize=8)
    for y in range(0, 61, 10):
        plt.plot(range(1, len(fce_test)), [y] * len(range(1, len(fce_test))), "--", lw=0.5, color="black",
                 alpha=0.3)

    #print(len(f_scores_artificial), len(f_scores_orig), len(rates))
    t = np.arange(0, 101)


    #print(rates[0::2])
    l1 = plt.plot(t, fce_dev_avg, lw=1, color=tableau20[0], label =  'FCE (dev)')
    l2 = plt.plot(t, fce_test_avg, lw=1, color=tableau20[2], label = 'FCE')
    l3 = plt.plot(t, conll1_avg, lw=1, color=tableau20[4], label = 'CoNLL1')
    l4 = plt.plot(t, conll2_avg, lw=1, color=tableau20[6], label = 'CoNLL2')

    val1 = fce_dev[-50]
    val2 = fce_test[-50]
    val3 = conll1[-50]
    val4 = conll2[-50]
    plt.xlim(0, 110)
    plt.legend(loc=7, frameon=False, bbox_to_anchor = (1.112,0.5), fontsize = 8)

    #plt.text(43, val1 + 0.25, r'Original data $F_{0.5}$', fontsize=8, color=tableau20[0])
    #plt.text(43, val2 - 0.25, r'Artificial data $F_{0.5}$', fontsize=8, color=tableau20[2])
    #plt.text(43, val3, r'Learning rate', fontsize=8, color=tableau20[4])
    #plt.text(43, val3, r'Learning rate', fontsize=8, color=tableau20[4])


    plt.show()

if __name__ == '__main__':
    #plot1()
    #plot2()
    #plot3()
    plot4()


    #plt.text(6.8, 40, r'$\tau = 0$', fontsize=10, weight = 'heavy', color=tableau20[0])
    #plt.text(6.8, 45, r'$\tau = 0.25$', fontsize=10, weight = 'heavy', color=tableau20[2])
    #plt.text(6.8, 50, r'$\tau = 0.5$', fontsize=10, color=tableau20[4],  weight = 'heavy')
    #plt.text(6.8, 55, r'$\tau = 0.75$', fontsize=10, color=tableau20[6],  weight = 'heavy')
    #plt.text(6.8, 60, r'$\tau = 1$', fontsize=10, color=tableau20[8],  weight = 'heavy')




    #f_scores = [0.1865802382620883, 0.01067463706233988, 0.38542766631467784, 0.03143336127409891, 0.37872400224845426,
    # 0.056491372226787184, 0.3774538106235566, 0.06808943089430894, 0.41821808510638286, 0.10498430141287284,
    # 0.41800643086816724, 0.1637233259749816, 0.4352910602910603, 0.18565248738284068, 0.4461085509472606,
    # 0.19967765042979943, 0.46644372693726943, 0.22939750692520777, 0.4674563017479302, 0.2367617107942974,
    # 0.47495383194829177, 0.32638466220328666, 0.47461116193961583, 0.33900836320191163, 0.48999569707401036,
    # 0.295411690760528, 0.48746046091278805, 0.39096030042918456, 0.49292756108015434, 0.3362792091072499,
    # 0.5065913370998116, 0.3366510538641686, 0.509276611694153, 0.39283769063180823, 0.5030487804878049,
    # 0.3887659103486441, 0.5181623931623932, 0.42633703329969724, 0.5190003743916136, 0.39871255911718334,
    # 0.5175009409108017, 0.43129016312407314, 0.5222142601218202, 0.4019037546271814, 0.5189123071132857,
    # 0.4006578947368421, 0.5191059841384283, 0.435569498069498, 0.5199597450519959, 0.4162462159434914,
    # 0.5253811503811504, 0.4391891891891892, 0.5248287671232876, 0.4143920595533499, 0.5222011057360056,
    # 0.4250963391136801, 0.5266184686164969, 0.448345259391771, 0.5240522459381969, 0.45266338406445844,
    # 0.5178347934918649, 0.4406108597285068, 0.5234473023839398, 0.43702107279693486, 0.5268184596577017,
    # 0.4311163895486935, 0.5184680593399941, 0.4489958922866271, 0.5184977578475336, 0.4473868408772749,
    # 0.5099826388888888, 0.4583521955636034, 0.5189382642409782, 0.4627403846153847, 0.5134115674769488,
    # 0.456688596491228, 0.5102996254681649, 0.460497114957834, 0.5087085811384877, 0.46497844827586204,
    # 0.5167780360255665, 0.4688176699870074, 0.5153694303440496, 0.4701784936874184, 0.5133106768620788]







